#!/usr/bin/env ruby

# -*- mode: shell -*-

require 'aws-sdk-ec2'
require 'trollop'

options = Trollop::options do
  version "Necrosis 0.1.0 (c) Airbnb, Inc."
  banner  "Necrosis: the killing script"

  opt('aws_access_key',
      "aws access key",
      :type => String,
      :default => ENV['AWS_ACCESS_KEY']
      )

  opt('aws_secret_key',
      "aws secret key",
      :type => String,
      :default => ENV['AWS_SECRET_KEY']
      )

  opt('aws_session_token',
      "aws sts session token",
      :type => String,
      :default => ENV['AWS_SESSION_TOKEN']
  )

  opt('aws_regions',
      "comma-separated list of aws regions to search",
      :type => String,
      :default => ENV['AWS_REGIONS'],
      :short => :r
      )

  opt :non_interactive, 'Do not ask confirmation', :short => :f
end

NON_INTERACTIVE = options[:non_interactive]

required_parameters = %w(aws_access_key aws_secret_key)

required_parameters.each do |arg|
  raise ArgumentError, "--#{arg.gsub('_','-')} needs to be specified on the commandline or set \
by the #{arg.upcase.gsub('-','_')} environment variable" if
    options[arg].nil? or ! options[arg]
end

raise ArgumentError, "you did not provide any instance ids to kill" if ARGV.empty?

# a hash from instance_id => [ec2 instance objects]
instances = ARGV.inject({}) { |h, n| h[n] = []; h }

# convert comma-separated list to Array
regions = (options['aws_regions'] || '').split(',')

def authorized? instance
  return true if NON_INTERACTIVE

  puts 'Terminate? (y/N)'
  confirm = $stdin.gets
  confirmed = confirm && confirm.chomp.downcase == 'y'

  if confirmed
    age = Time.now - instance.launch_time
    days = age / (24*3600)
    if days > 2
      puts "Instance is #{days} days old. REALLY terminate? (y/N)"
      confirm = $stdin.gets
      confirmed = confirm && confirm.chomp.downcase == 'y'
    end
  end

  return confirmed
end

def delete_instance id, instance, region
  if instance.describe_attribute(attribute: 'disableApiTermination').disable_api_termination.value
    puts "Cannot terminate instance #{id} -- termination protection enabled"
    return
  end

  puts "Instance #{id} (#{instance.state.name} in #{region.region_name})"
  puts "\tKey name: #{instance.key_name}"
  puts "\tLaunched: #{instance.launch_time}"
  instance.tags.each do |tag|
    puts "\t#{tag.key} : #{tag.value}"
  end

  if authorized? instance
    instance.terminate
    puts "Instance #{id} terminated"
  end
end

opts = {
  :access_key_id => options['aws_access_key'],
  :secret_access_key => options['aws_secret_key'],
  :session_token => options['aws_session_token']
}
ec2 = Aws::EC2::Resource.new(opts)
ec2.client.describe_regions.regions.each do |region|
  next unless regions.empty? || regions.include?(region.region_name)
  instances.each do |id, objects|
    regional_ec2 = Aws::EC2::Resource.new(opts.merge(region: region.region_name))
    instance = regional_ec2.instance(id)
    objects << [instance, region] if instance.exists?
  end
end

instances.each do |id, objects|
  case objects.count
  when 0
    STDERR.puts "No instance #{id} found"
    next
  when 1
    instance, region = objects.first
    delete_instance id, instance, region
  else
    puts "Found multiple instances named #{id}"
    next
  end
end
