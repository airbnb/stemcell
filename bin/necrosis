#!/usr/bin/env ruby

# -*- mode: shell -*- 

require 'aws-sdk'
require 'trollop'

options = Trollop::options do
  version "stemcell #{Stemcell::VERSION} (c) Airbnb, Inc."
  banner  "Necrosis: the killing script"

  opt('aws_access_key',
      "aws access key",
      :type => String,
      :default => ENV['AWS_ACCESS_KEY']
      )

  opt('aws_secret_key',
      "aws secret key",
      :type => String,
      :default => ENV['AWS_SECRET_KEY']
      )
end

required_parameters = [
                       'aws_access_key',
                       'aws_secret_key',
                      ]

required_parameters.each do |arg|
  raise ArgumentError, "--#{arg.gsub('_','-')} needs to be specified on the commandline or set \
by the #{arg.upcase.gsub('-','_')} environment variable" if
    options[arg].nil? or ! options[arg]
end

raise ArgumentError, "you did not provide any instance ids to kill" if ARGV.size == 0

# a hash from instance_id => [ec2 instance objects]
instances = ARGV.inject({}) { |h, n| h[n] = []; h }

ec2 = AWS::EC2.new(:access_key_id => options['aws_access_key'], :secret_access_key => options['aws_secret_key'])
ec2.regions.each do |region|
  instances.each do |id, objects|
    instance = region.instances[id]
    begin
      instance.status
    rescue
      next
    else
      objects << [instance, region]
    end
  end
end

# kill the instances
instances.each do |id, objects|
  if objects.count == 0
    puts "No instance #{id} found"
    next
  end

  if objects.count > 1
    puts "Found multiple instances named #{id}"
    next
  end

  instance, region = objects[0]
  if instance.api_termination_disabled?
    puts "Cannot terminate instance #{id} -- termination protection enabled"
    next
  end

  puts "Instance #{id} (#{instance.status} in #{region.name})"
  puts "\tKey name: #{instance.key_name}"
  puts "\tLaunched: #{instance.launch_time}"
  instance.tags.to_h.each do |k, v|
    puts "\t#{k} : #{v}"
  end

  puts "Terminate? (y/N)? "
  confirm = $stdin.gets
  if confirm && confirm.chomp.downcase == 'y'
    instance.terminate
    puts "Instance #{id} terminated"
  end
end
