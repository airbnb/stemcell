#!/bin/bash -e
#
# This script will bootstrap and run chef
#
# You need to specify a role, origin, git_key, branch name, and data
# bag secret info below
#
# Martin Rhoads


set -o pipefail
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin


# ensure we were called by root
if [ $UID != 0 ]; then
  echo "this script needs to be run as root. exiting..."
  exit 1
fi


# redirect stdout to /var/log/init
exec >> /var/log/init

# redirect stderr to /var/log/init.err
exec 2>> /var/log/init.err


##
## settings
##

chef_dir=/etc/chef
converge=/usr/local/bin/first_converge
role=<%= opts['chef_role'] %>
environment=<%= opts['chef_environment'] %>
origin=<%= opts['git_origin'] %>
branch=<%= opts['git_branch'] %>
git_key='<%= opts['git_key'] %>'
data_bag_secret='<%= opts["chef_data_bag_secret"] %>'
hostname='<%= opts['instance_hostname'] %>'
domain_name='<%= opts['instance_domain_name'] %>'
chef_version='<%= opts['chef_version'] %>'


##
## common function
##


update() {
  echo updating apt repo
  apt-get update 1>&2
}


install() {
  if ! (dpkg -l | awk '{print $2}' | grep -q ^$1$ ) ; then
    echo installing $1...
    export DEBIAN_FRONTEND=noninteractive
    apt-get install -y $1 1>&2
  fi
}


set_hostname() {
  instance_id=`curl --silent --retry 5 --retry-delay 5 169.254.169.254/latest/meta-data/instance-id` 1>&2
  local_ip=`curl --silent --retry 5 --retry-delay 5 169.254.169.254/latest/meta-data/local-ipv4` 1>&2

  if [ "z$hostname" == "z" ]; then
    hostname=$instance_id
  fi
  if [ "z${domain_name}" == "z" ]; then
    domain_name="localdomain"
  fi

  fqdn="${hostname}.${domain_name}"
  echo "setting hostname to $hostname ($fqdn)"
  echo $hostname > /etc/hostname
  hostname -F /etc/hostname

  # allow a proper `hostname -f` to return something
  echo "$local_ip $fqdn $hostname" >> /etc/hosts
}

install_chef() {
  # check to see if chef is already installed
  if ! which chef-solo > /dev/null ; then
    platform=`lsb_release -s -i | tr '[:upper:]' '[:lower:]'`
    platform_version=`lsb_release -s -r`
    arch=`uname -m`
    package_local="/tmp/chef_${chef_version}.deb"
    package_url="<%= opts['chef_package_source'] %>"
    echo "Downloading chef from $package_url"
    wget $package_url -O $package_local
    echo "Installing chef $chef_version"
    dpkg -i $package_local
    rm $package_local
  else
    echo chef is already installed
  fi
}

update_repo() {
  echo -e "$git_key" > $keyfile
  chmod 0400 $keyfile

  echo "ssh -i $keyfile -o StrictHostKeyChecking=no \$1 \$2" > $git_wrapper
  chmod 0500 $git_wrapper

  mkdir -p $(dirname $repo_dir)
  if [ ! -d $repo_dir ]; then
    echo "downloading cookbook repo..."
    GIT_SSH=$git_wrapper git clone --branch $branch --depth 1 $origin $repo_dir
  else
    echo "cookbook repo already exists"
  fi

  echo "done updating code"
}


configure_chef() {
  echo "Setting up ec2 hint for Chef Ohai"
  mkdir -p /etc/chef/ohai/hints/
  touch /etc/chef/ohai/hints/ec2.json
  echo "saving current origin ($origin), branch ($branch), role ($role), and environment ($environment)"
  echo "$origin" > $originfile
  chmod 644 $originfile

  echo "$branch" > $branchfile
  chmod 644 $branchfile

  echo "$role" > $rolefile
  chmod 644 $rolefile

  echo "$environment" > $envfile
  chmod 644 $envfile

  echo "configuring chef solo..."
  cat<<EOF > ${chef_dir}/solo.rb
repo_dir =    "${repo_dir}"
cookbook_path "#{repo_dir}/cookbooks"
role_path     "#{repo_dir}/roles"
data_bag_path "#{repo_dir}/data_bags"

log_level        :info
log_location     STDOUT
EOF

  encrypted_data_bag_secret_file=${chef_dir}/encrypted_data_bag_secret
  echo -e "$data_bag_secret" > $encrypted_data_bag_secret_file
  chmod 0400 $encrypted_data_bag_secret_file

  echo "chef configured"
}


configure_converger() {
  cat<<EOF > $converge
#!/bin/bash -eu

repo="${repo_dir}"
branch=\`cat ${branchfile}\`
role=\`cat ${rolefile}\`
env=\`cat ${envfile}\`

cd \${repo}

runlist="role[\${role}]"
if [ -f "roles/\${env}.rb" ]
then
  runlist+=",role[\${env}]"
fi

echo doing a hard reset to origin/\${branch}
GIT_SSH=${git_wrapper} git fetch
git reset --hard origin/\${branch}
git clean -fdx

json="{\"role\": \"\${role}\", \"env\": \"\${env}\", \"branch\": \"\${branch}\"}"
json_file=\`tempfile\`
echo \$json > \$json_file
trap "{ rm -f '\$json_file' ; }" EXIT

echo "running chef-solo with runlist \$runlist and json \$json (in file \$json_file)"
chef-solo -o "\${runlist}" -j \${json_file} "\$@"
EOF
  chmod 544 $converge
}

configure_chef_daemon() {
  cat<<EOF > /etc/init/chef-solo.conf
description     "chef-solo"
author          "Martin Rhoads"
start on networking
script
chef-solo --interval 600 --splay 600  | logger -t chef-solo 2>&1
end script
respawn
EOF
}


run_chef() {
  echo "doing initial chef run..."
  $converge 1>&2
  echo "initial chef run complete"
}

start_chef_daemon() {
  start chef-solo
}


##
## main
##

#some derived vars
repo_dir=${chef_dir}/src
keyfile=${chef_dir}/git_key
envfile=${chef_dir}/environment
rolefile=${chef_dir}/role
branchfile=${chef_dir}/branch
originfile=${chef_dir}/origin
git_wrapper=${chef_dir}/git_wrapper

echo "starting chef bootstrapping..."
mkdir -p ${chef_dir}
update
install curl
install git
set_hostname
install_chef
update_repo
configure_chef
configure_converger
run_chef

configure_chef_daemon
# start_chef_daemon


##
## exit
##


echo "<%= last_bootstrap_line %>"
