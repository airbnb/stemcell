#!/bin/bash -ex
#
# This script will bootstrap and run chef
#
# You need to specify a role, origin, git_key, branch name, and data
# bag secret info below
#
# Martin Rhoads


set -o pipefail
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin


# ensure we were called by root
if [ $UID != 0 ]; then
  echo "this script needs to be run as root. exiting..."
  exit 1
fi

## Only run once at a time
# http://stackoverflow.com/questions/959475/shell-fragment-to-make-sure-only-one-instance-a-shell-script-runs-at-any-given-t
# slightly modified to use $$
# to run it I must set +e

SCRIPTNAME=`basename $0`
PIDFILE=/var/run/${SCRIPTNAME}.pid

set +e
if [ -f ${PIDFILE} ]; then
   #verify if the process is actually still running under this pid
   OLDPID=`cat ${PIDFILE}`
   RESULT=`ps -ef | grep ${OLDPID} | grep ${SCRIPTNAME}`

   if [ -n "${RESULT}" ]; then
     echo "Script already running! Exiting"
     exit 255
   fi

fi
### ---
set -e


# redirect stdout to /var/log/init
exec > /var/log/init

# redirect stderr to /var/log/init.err
exec 2> /var/log/init.err

#grab pid of this process and update the pid file with it
echo $$ > ${PIDFILE}



##
## settings
##


chef_version=11.4.0
chef_dir=/etc/chef
converge=/usr/local/bin/first_converge
role=<%= opts['chef_role'] %>
environment=<%= opts['chef_environment'] %>
origin=<%= opts['git_origin'] %>
branch=<%= opts['git_branch'] %>
git_key='<%= opts["git_key"] %>'
data_bag_secret='<%= opts["chef_data_bag_secret"] %>'


##
## common function
##


update() {
  echo updating apt repo
  apt-get update 1>&2
}


install() {
  if ! (dpkg -l | awk '{print $2}' | grep -q ^$1$ ) ; then
    echo installing $1...
    export DEBIAN_FRONTEND=noninteractive
    apt-get install -y $1 1>&2
  fi
}


get_instance_id() {
  instance_id=`curl --retry 5 --retry-delay 5 169.254.169.254/latest/meta-data/instance-id` 1>&2
  echo instance_id is $instance_id
}


install_chef() {
  if ! which chef-solo > /dev/null ; then
    echo installing chef via omnibus...
    curl -L --silent https://www.opscode.com/chef/install.sh | sudo bash -s -- -v $chef_version  1>&2
  else
    echo chef is already installed
  fi
}


update_repo() {
  echo -e "$git_key" > $keyfile
  chmod 0400 $keyfile

  echo "ssh -i $keyfile -o StrictHostKeyChecking=no \$1 \$2" > $git_wrapper
  chmod 0500 $git_wrapper

  mkdir -p $(dirname $repo_dir)
  if [ ! -d $repo_dir ]; then
    echo "downloading cookbook repo..."
    GIT_SSH=$git_wrapper git clone --branch $branch --depth 1 $origin $repo_dir
  else
    echo "cookbook repo already exists"
  fi

  echo "done updating code"
}


configure_chef() {
  echo "saving current branch ($branch), role ($role), and environment ($environment)"
  echo "$branch" > $branchfile
  chmod 644 $branchfile

  echo "$role" > $rolefile
  chmod 644 $rolefile

  echo "$environment" > $envfile
  chmod 644 $envfile

  echo "configuring chef solo..."
  cat<<EOF > ${chef_dir}/solo.rb
repo_dir =    "${repo_dir}"
cookbook_path "#{repo_dir}/cookbooks"
role_path     "#{repo_dir}/roles"
data_bag_path "#{repo_dir}/data_bags"

log_level        :info
log_location     STDOUT
EOF

  encrypted_data_bag_secret_file=${chef_dir}/encrypted_data_bag_secret
  echo -e "$data_bag_secret" > $encrypted_data_bag_secret_file
  chmod 0400 $encrypted_data_bag_secret_file

  echo "chef configured"
}


configure_converger() {
  cat<<EOF > $converge
#!/bin/bash -eu

repo="${repo_dir}"
branch=\`cat ${branchfile}\`
role=\`cat ${rolefile}\`
env=\`cat ${envfile}\`

cd \${repo}

runlist="role[\${role}]"
if [ -f "roles/\${env}.rb" ]
then
  runlist+=",role[\${env}]"
fi

echo doing a hard reset to origin/\${branch}
GIT_SSH=${git_wrapper} git fetch
git reset --hard origin/\${branch}
git clean -fdx

json="{\"role\": \"\${role}\", \"env\": \"\${env}\", \"branch\": \"\${branch}\"}"
json_file=\`tempfile\`
echo \$json > \$json_file
trap "{ rm -f '\$json_file' ; }" EXIT

echo "running chef-solo with runlist \$runlist and json \$json (in file \$json_file)"
chef-solo -o "\${runlist}" -j \${json_file} "\$@"
EOF
  chmod 544 $converge
}

configure_chef_daemon() {
  cat<<EOF > /etc/init/chef-solo.conf
description     "chef-solo"
author          "Martin Rhoads"
start on networking
script
chef-solo --interval 600 --splay 600  | logger -t chef-solo 2>&1
end script
respawn
EOF
}


run_chef() {
  echo "doing initial chef run..."
  $converge 1>&2
  echo "initial chef run complete"
}

start_chef_daemon() {
  start chef-solo
}


##
## main
##

#some derived vars
repo_dir=${chef_dir}/src
keyfile=${chef_dir}/git_key
envfile=${chef_dir}/environment
rolefile=${chef_dir}/role
branchfile=${chef_dir}/branch
git_wrapper=${chef_dir}/git_wrapper

echo "starting chef bootstrapping..."
mkdir -p ${chef_dir}
update
install curl
install git
get_instance_id
install_chef
update_repo
configure_chef
configure_converger
run_chef

configure_chef_daemon
# start_chef_daemon


##
## exit
##


if [ -f ${PIDFILE} ]; then
    rm ${PIDFILE}
fi
# I can delete the cron too
rm -f /etc/cron.d/ec2admin_get_callback1

echo "<%= last_bootstrap_line %>"
