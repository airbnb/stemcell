#!/bin/bash -e
#
# This script will bootstrap and run chef

(
echo 'Acquiring converge lock...'
/usr/bin/flock -e 200
echo 'Lock acquired!'

set -o pipefail
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

# ensure we were called by root
if [ $UID != 0 ]; then
  echo "this script needs to be run as root. exiting..."
  exit 1
fi

# redirect stdout to /var/log/init
exec >> /var/log/init

# redirect stderr to /var/log/init.err
exec 2>> /var/log/init.err


##
## settings
##

chef_dir=/etc/chef
repo_dir=${chef_dir}/src
keyfile=${chef_dir}/git_key
envfile=${chef_dir}/environment
jsonfile=${chef_dir}/nodejson
launchedbyfile=${chef_dir}/launched_by
rolefile=${chef_dir}/role
branchfile=${chef_dir}/branch
originfile=${chef_dir}/origin
git_wrapper=${chef_dir}/git_wrapper
converge=/usr/local/bin/first_converge
role=<%= opts['chef_role'] %>
environment=<%= opts['chef_environment'] %>
origin=<%= opts['git_origin'] %>
branch=<%= opts['git_branch'] %>
git_key='<%= opts['git_key'] %>'
data_bag_secret='<%= opts["chef_data_bag_secret"] %>'
hostname='<%= opts['instance_hostname'] %>'
domain_name='<%= opts['instance_domain_name'] %>'
chef_version='<%= opts['chef_version'] %>'
username='<%= opts.fetch('user', ENV['USER']) %>'
encrypted_data_bag_secret_path='<%= opts['chef_data_bag_secret_path'].to_s %>'
node_json=$(cat <<'EOF'
<%= opts['node_json'] %>
EOF
)

##
## common functions
##

update() {
  echo updating repository metadata

  case $OS_PACKAGE_MANAGER in
    apt)
      apt-get update 1>&2
      ;;
    yum)
      # yum install will check if metadata needs to be updated
      # so it's just for consistency with apt-based distros
      yum check-update 1>&2 || true
      ;;
  esac
}

install() {
  case $OS_PACKAGE_MANAGER in
    apt)
      if ! (dpkg -l | awk '{print $2}' | grep -q ^$1$ ) ; then
        echo installing $1...
        export DEBIAN_FRONTEND=noninteractive
        apt-get install -y $1 1>&2
      fi
      ;;
    yum)
      rpm -q $1 2>&1 >/dev/null || yum install -y $1
      ;;
  esac
}

set_hostname() {
  instance_id=`curl --silent --retry 5 --retry-delay 5 169.254.169.254/latest/meta-data/instance-id` 1>&2
  local_ip=`curl --silent --retry 5 --retry-delay 5 169.254.169.254/latest/meta-data/local-ipv4` 1>&2

  if [ "z$hostname" == "z" ]; then
    hostname=$instance_id
  fi
  if [ "z${domain_name}" == "z" ]; then
    domain_name="localdomain"
  fi

  fqdn="${hostname}.${domain_name}"
  echo "setting hostname to $hostname ($fqdn)"
  echo $hostname > /etc/hostname
  hostname -F /etc/hostname

  # allow a proper `hostname -f` to return something
  echo "$local_ip $fqdn $hostname" >> /etc/hosts
}

download_chef_package() {
  echo "Downloading chef from $1"
  wget "$1" -O "$2" --progress=dot:mega --tries=15 --retry-connrefused --timeout=5 --wait=10 --random-wait --continue --no-dns-cache
}

install_chef() {
  package_local="/tmp/chef_${chef_version}.${OS_PACKAGE_EXT}"
  package_url="$(render_chef_url)"

  # check to see if chef is already installed
  if ! which chef-solo > /dev/null ; then
    case $OS_PACKAGE_MANAGER in
      apt)
        download_chef_package "$package_url" "$package_local"
        echo "Installing chef $chef_version"
        dpkg -i $package_local
        ;;
      yum)
        download_chef_package "$package_url" "$package_local"
        echo "Installing chef $chef_version"
        rpm -ivh "$package_local"
        ;;
    esac
  else
    echo chef is already installed
  fi

  rm -f $package_local
}

create_ohai_hint() {
  ohai_hints_dir="${chef_dir}/ohai/hints"
  mkdir -p $ohai_hints_dir
  touch "${ohai_hints_dir}/ec2.json"
}

update_repo() {
  echo -e "$git_key" > $keyfile
  chmod 0400 $keyfile

  echo "ssh -i $keyfile -o StrictHostKeyChecking=no \$1 \$2" > $git_wrapper
  chmod 0500 $git_wrapper

  mkdir -p $(dirname $repo_dir)
  if [ ! -d $repo_dir ]; then
    echo "downloading cookbook repo..."
    GIT_SSH=$git_wrapper git clone --branch $branch --depth 1 $origin $repo_dir
  else
    echo "cookbook repo already exists"
  fi

  echo "done updating code"
}

configure_chef() {
  echo "saving current origin ($origin), branch ($branch), role ($role), environment ($environment), and node_json ($node_json)"
  echo "$origin" > $originfile
  chmod 644 $originfile

  echo "$branch" > $branchfile
  chmod 644 $branchfile

  echo "$role" > $rolefile
  chmod 644 $rolefile

  echo "$environment" > $envfile
  chmod 644 $envfile

  echo "$username" > $launchedbyfile
  chmod 644 $launchedbyfile

  echo "$node_json" > $jsonfile
  chmod 644 $jsonfile

  echo "configuring chef solo..."
  cat<<EOF > ${chef_dir}/solo.rb
# chef config (https://docs.chef.io/config_rb_client.html)
repo_dir = "${repo_dir}"

cookbook_path ["#{repo_dir}/site-cookbooks", "#{repo_dir}/cookbooks"]
role_path "#{repo_dir}/roles"
data_bag_path "#{repo_dir}/data_bags"
ohai.plugin_path << "#{repo_dir}/ohai_plugins"
ssl_verify_mode :verify_peer
log_level :info
log_location STDOUT

EOF

  if [ -n "$encrypted_data_bag_secret_path" ]; then
    cat <<EOF >> ${chef_dir}/solo.rb

encrypted_data_bag_secret "${encrypted_data_bag_secret_path}"
EOF
  fi


  encrypted_data_bag_secret_file=${chef_dir}/encrypted_data_bag_secret
  echo -e "$data_bag_secret" > $encrypted_data_bag_secret_file
  chmod 0400 $encrypted_data_bag_secret_file

  echo "chef configured"
}

configure_converge() {
  cat<<EOF > $converge
#!/bin/bash -eu

repo="${repo_dir}"
branch=\`cat ${branchfile}\`
role=\`cat ${rolefile}\`
env=\`cat ${envfile}\`
node_json=\`cat ${jsonfile}\`

cd \${repo}

runlist="role[\${role}]"
if [ -f "roles/\${env}.rb" ]
then
  runlist+=",role[\${env}]"
fi

echo doing a hard reset to origin/\${branch}
GIT_SSH=${git_wrapper} git fetch
git reset --hard origin/\${branch}
git clean -fdx

json_file=\`mktemp\`
echo \$node_json > \$json_file
trap "{ rm -f '\$json_file' ; }" EXIT

echo "running chef-solo with runlist \$runlist and json \$node_json (in file \$json_file)"
<% if opts['chef_version'].to_f >= 12.11 %>
chef-solo --legacy-mode -o "\${runlist}" -j \${json_file} "\$@"
<% else %>
chef-solo -o "\${runlist}" -j \${json_file} "\$@"
<% end %>
EOF
  chmod 544 $converge
}

run_chef() {
  set +e # unset e to allow retries
  converge_succeed=false
  for atmpt in $(seq 1 3);
  do
    echo "doing initial chef run... (attempt $atmpt)"
    $converge 1>&2
    if [ $? -eq 0 ]; then
      converge_succeed=true
      break
    fi
  done

  if [ $converge_succeed == true ]; then
    echo "initial chef run completes successfully"
  else
    echo "****************************************"
    echo "*  WARNING: initial converge failed!   *"
    echo "****************************************"
  fi

  set -e
}

render_chef_url() {
  base_url="<%= opts['chef_package_source'] %>"
  echo $base_url | sed \
    -e "s/%{platform}/$OS_PLATFORM/g" \
    -e "s/%{platform_version}/$OS_PLATFORM_VERSION/g" \
    -e "s/%{chef_version}/$chef_version/g" \
    -e "s/%{package_manager}/$OS_PACKAGE_MANAGER/g" \
    -e "s/%{package_arch}/$OS_PACKAGE_ARCH/g" \
    -e "s/%{package_ext}/$OS_PACKAGE_EXT/g"
}

check_os_version() {
  NAME=unsupported

  if [ -f /etc/os-release ]; then
    . /etc/os-release
  fi

  case "$NAME" in
    "Ubuntu")
      OS_VERSION="$NAME $VERSION_ID"
      OS_PLATFORM=ubuntu
      OS_PLATFORM_VERSION=$VERSION_ID
      OS_PACKAGE_MANAGER=apt
      OS_PACKAGE_ARCH=$(dpkg --print-architecture)
      OS_PACKAGE_EXT=deb
      ;;
    "Amazon Linux")
      OS_VERSION="$NAME $VERSION_ID"
      OS_PLATFORM=amazon
      OS_PLATFORM_VERSION=$VERSION_ID
      OS_PACKAGE_MANAGER=yum
      OS_PACKAGE_ARCH=$(uname -m)
      OS_PACKAGE_EXT=rpm
      ;;
    *)
      echo "Unsupported operating system"
      exit 1
      ;;
  esac
}

##
## main
##

check_os_version

echo "starting chef bootstrapping on ${OS_VERSION}..."
update
install curl
install git
set_hostname
install_chef
create_ohai_hint
update_repo
configure_chef
configure_converge
run_chef
echo "<%= last_bootstrap_line %>"
) 200> /var/run/converge.lock
